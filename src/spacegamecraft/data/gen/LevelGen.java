package spacegamecraft.data.gen;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import spacegamecraft.data.Empire;
import spacegamecraft.data.Galaxy;
import spacegamecraft.data.SpaceObject;
import spacegamecraft.data.System;
import spacegamecraft.geo.Point;
import spacegamecraft.gfx.Buffer;
import spacegamecraft.gfx.Color;

public class LevelGen {
	/**
	 * The max number of systems in a galaxy
	 */
	public static final int MAX_SYSTEMS = 100;
	/**
	 * Maximum number of objects in a system.
	 */
	public static final int MAX_OBJECTS = 10;
	
	/**
	 * Max length of the names generated by the name generator.
	 */
	private static final int PLANET_NAME_LENGTH = 10;
	
	/**
	 * Number of empires
	 */
	private static final int MAX_EMPIRES = 10;
	
	/**
	 * This is the change of an empire existing in a system. The change is 1 in EMPIRE_CHANCE
	 */
	private static int EMPIRE_CHANCE = 100;
	
	/**
	 * Generate a galaxy.
	 * @param rand
	 * @return
	 */
	public static Galaxy generateGalaxy(Random rand) {
		ArrayList<System> systems = new ArrayList<System>();
		for(int x=0; x < MAX_SYSTEMS; x++) {
			systems.add(generateSystem(rand));
		}
		ArrayList<Empire> empires = new ArrayList<Empire>();
		for(int i=0; i<MAX_EMPIRES; i++) {
			Empire empire = generateEmpire(rand);
			for(int isys=0; isys<systems.size(); isys++) {
				System sys = systems.get(isys);
				if(!sys.owned() && rand.nextInt(EMPIRE_CHANCE) == 0) {
					// This is the starting system of this empire.
					empire.owned_systems.add(sys);
					systems.get(isys).owner = empire;
					
					// Now we find the nearby systems.
					for(int isys2=0; isys2<systems.size(); isys2++) {
						System sec_system = systems.get(isys2);
						if(sys.loc.distance(sec_system.loc) < empire.influenceDistance()) {
							empire.owned_systems.add(sec_system);
							sec_system.owner = empire;
						}
					}

				}
			}
			empires.add(empire);

		}
		
		return new Galaxy(systems, empires);
	}
	
	public static System generateSystem(Random rand) {
		return generateSystem(new Point(rand.nextInt(Galaxy.WIDTH), rand.nextInt(Galaxy.HEIGHT)), rand);
	}

	public static System generateSystem(Point loc, Random rand) {
		ArrayList<SpaceObject> objects = new ArrayList<SpaceObject>();
		
		for(int number_objects = rand.nextInt(MAX_OBJECTS); number_objects > 0; number_objects--) {
			objects.add(generateObject(rand));
		}
		int system_size = rand.nextInt(3);
		
		return new System(loc, system_size, Gpw.generate(rand.nextInt(PLANET_NAME_LENGTH-3)+3, rand), objects);
	}

	public static SpaceObject generateObject(Random rand) {
		return new SpaceObject(Gpw.generate(rand.nextInt(PLANET_NAME_LENGTH-3)+3, rand));
	}
	
	public static String randomPlanetName(Random rand) {
		String[] characters = "abcdefghijklmnopqrstuvwxyz'aioue".split("");
		StringBuilder result = new StringBuilder();
		for(int length=rand.nextInt(PLANET_NAME_LENGTH-3)+3; length > 0; length--) {
			result.append(characters[rand.nextInt(characters.length)]);
		}
		
		return result.toString();
	}
	
	public static Empire generateEmpire(Random rand) {
		return new Empire(Gpw.generate(PLANET_NAME_LENGTH, rand), Color.randColor(rand), rand.nextInt(Empire.MAX_EMPIRE_SIZE));
	}
	
	public static void main(String[] args) {
		int width = Galaxy.WIDTH;
		int height = Galaxy.HEIGHT;
		
		for(int i=0; i < 1; i++) {
			BufferedImage img = new BufferedImage(width+1, height+1, BufferedImage.TYPE_INT_RGB);
			Buffer buf = new Buffer(width, height);
			Galaxy gal = LevelGen.generateGalaxy(new Random());
			for(int s=0; s<gal.systems.size(); s++) {
				System sys = gal.systems.get(s);
				java.lang.System.out.println(sys.name + ((sys.owned()) ? ("[" + sys.owner.name + "]") : ""));
				for(int o=0; o<sys.objects.size(); o++) {
					SpaceObject obj = sys.objects.get(o);
					java.lang.System.out.println("    " + obj.name);
				}
			}
			
			java.lang.System.out.println("-----------------------------");
			
			for(int e=0; e<gal.empires.size(); e++) {
				Empire empire = gal.empires.get(e);
				java.lang.System.out.println(empire.name);
				for(int s=0; s<empire.owned_systems.size(); s++) {
					System sys = empire.owned_systems.get(s);
					java.lang.System.out.println("    " + sys.name);
				}

			}
			buf = gal.draw(new Point(0, 0), buf);
			buf.drawOnImage(img);
			JOptionPane.showMessageDialog(null,
					null,
					"Another",
					JOptionPane.OK_CANCEL_OPTION,
					new ImageIcon(img.getScaledInstance(width*2, height*2, Image.SCALE_AREA_AVERAGING)));
		}
		java.lang.System.exit(0);
	}
}
